<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python學習(一)</title>
      <link href="/HexoBlog/2021/12/09/Python%E5%AD%B8%E7%BF%92%E4%B8%80/"/>
      <url>/HexoBlog/2021/12/09/Python%E5%AD%B8%E7%BF%92%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="pip和conda用法"><a href="#pip和conda用法" class="headerlink" title="pip和conda用法"></a><font color=#FF6600>pip和conda用法</font></h2><h3 id="創建虛擬環境"><a href="#創建虛擬環境" class="headerlink" title="創建虛擬環境"></a><font color=#008000>創建虛擬環境</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conda 已創建環境清單</span></span><br><span class="line">conda env list</span><br><span class="line"><span class="comment"># 環境名 testenv</span></span><br><span class="line"><span class="comment"># conda</span></span><br><span class="line">conda create --name testenv python=3.6</span><br><span class="line">conda create --n testenv python=3.6</span><br><span class="line"><span class="comment"># 加anaconda，為預先安裝基本套件</span></span><br><span class="line">conda create --name testenv python=3.6 anaconda</span><br><span class="line"><span class="comment"># 建置在指定目錄下，啟動指令改為conda activate C:\Users\testenv</span></span><br><span class="line">conda create --prefix=C:\Users\testenv python=3.6 anaconda</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip  3.3版本後，使用內建virtualenv創建，可直接在想新增的目錄下使用指令</span></span><br><span class="line">python -m venv testenv</span><br></pre></td></tr></table></figure><h3 id="開啟虛擬環境"><a href="#開啟虛擬環境" class="headerlink" title="開啟虛擬環境"></a><font color=#008000>開啟虛擬環境</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境名 testenv</span></span><br><span class="line"><span class="comment"># conda</span></span><br><span class="line">conda activate testenv</span><br><span class="line"><span class="comment"># 建置在指定目錄下，啟動指令</span></span><br><span class="line">conda activate C:\Users\testenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip windows 在創建目錄下使用指令</span></span><br><span class="line">activate</span><br><span class="line"><span class="comment"># pip linux</span></span><br><span class="line"><span class="built_in">source</span> testenv/bin/activate</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">source</span> activate testenv</span><br></pre></td></tr></table></figure><h3 id="離開虛擬環境"><a href="#離開虛擬環境" class="headerlink" title="離開虛擬環境"></a><font color=#008000>離開虛擬環境</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conda</span></span><br><span class="line">conda deactivate</span><br><span class="line"><span class="comment"># pip windows</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment"># pip linux</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure><h3 id="刪除虛擬環境"><a href="#刪除虛擬環境" class="headerlink" title="刪除虛擬環境"></a><font color=#008000>刪除虛擬環境</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境名 testenv</span></span><br><span class="line"><span class="comment"># conda</span></span><br><span class="line">conda remove --name testenv -all</span><br><span class="line"><span class="comment"># 只刪除虛擬環境中的指定套件(numpy)</span></span><br><span class="line">conda remove --name testenv numpy</span><br><span class="line"><span class="comment"># 刪除建置在指目錄下的環境</span></span><br><span class="line">conda remove --prefix=C:\Users\testenv -all</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 3.3版本後，使用內建virtualenv創建，可直接刪除創建時的資料夾就可</span></span><br></pre></td></tr></table></figure><h3 id="下載和更新和刪除套件"><a href="#下載和更新和刪除套件" class="headerlink" title="下載和更新和刪除套件"></a><font color=#008000>下載和更新和刪除套件</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conda 列出當前環境下所有套件</span></span><br><span class="line">conda list</span><br><span class="line"><span class="comment"># pip  列出當前環境下所有套件</span></span><br><span class="line">pip list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查詢套件(numpy)可否使用conda指令安裝</span></span><br><span class="line">conda search numpy</span><br><span class="line"><span class="comment"># pip  搜尋套件(numpy)</span></span><br><span class="line">pip search numpy</span><br><span class="line"><span class="comment"># conda 安裝套件(numpy)，無法使用conda時可用pip安裝</span></span><br><span class="line">conda install numpy</span><br><span class="line"><span class="comment"># pip  安裝套件(numpy)</span></span><br><span class="line">pip install numpy</span><br><span class="line"><span class="comment"># 特定版本</span></span><br><span class="line">pip install numpy==1.13.3</span><br><span class="line"><span class="comment"># 安裝.whl檔，請先至下載目錄</span></span><br><span class="line">pip install XXXXXX.whl</span><br><span class="line"><span class="comment"># 安裝的套件資訊(numpy)</span></span><br><span class="line">pip show numpy</span><br><span class="line"><span class="comment"># 安裝的套件位置(numpy)</span></span><br><span class="line">pip show --files numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># conda 更新套件(numpy)</span></span><br><span class="line">conda update numpy</span><br><span class="line"><span class="comment"># conda 更新所有套件</span></span><br><span class="line">conda update --all</span><br><span class="line"><span class="comment"># pip  列出所有要更新套件</span></span><br><span class="line">pip list --outdated</span><br><span class="line"><span class="comment"># pip  更新套件(numpy)</span></span><br><span class="line">pip update -U numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># conda 刪除套件(numpy)</span></span><br><span class="line">conda remove numpy</span><br><span class="line"><span class="comment"># pip  刪除套件(numpy)</span></span><br><span class="line">pip uninstall numpy</span><br></pre></td></tr></table></figure><h3 id="刪除虛擬環境-1"><a href="#刪除虛擬環境-1" class="headerlink" title="刪除虛擬環境"></a><font color=#008000>刪除虛擬環境</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境名 testenv</span></span><br><span class="line"><span class="comment"># conda</span></span><br><span class="line">conda remove --name testenv -all</span><br><span class="line"><span class="comment"># 只刪除虛擬環境中的指定套件(numpy)</span></span><br><span class="line">conda remove --name testenv numpy</span><br><span class="line"><span class="comment"># 刪除建置在指目錄下的環境</span></span><br><span class="line">conda remove --prefix=C:\Users\testenv -all</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 3.3版本後，使用內建virtualenv創建，可直接刪除創建時的資料夾就可</span></span><br></pre></td></tr></table></figure><h3 id="conda其它指令"><a href="#conda其它指令" class="headerlink" title="conda其它指令"></a><font color=#008000>conda其它指令</font></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Anaconda 版本</span></span><br><span class="line">conda -V</span><br><span class="line"><span class="comment"># 更新Anaconda </span></span><br><span class="line">conda update conda</span><br><span class="line"><span class="comment"># 更新Spyder版本</span></span><br><span class="line">conda update spyder</span><br></pre></td></tr></table></figure><h2 id="print-函數"><a href="#print-函數" class="headerlink" title="print() 函數"></a><font color=#FF6600>print() 函數</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">object</span>,sep=<span class="string">&quot;&quot;</span>,end=<span class="string">&quot;\n&quot;</span>,file=<span class="string">&quot;sys.stderr&quot;</span>,flush=<span class="literal">False</span>)  <span class="comment">#file預設也可能是sys.stdout</span></span><br></pre></td></tr></table></figure><ul><li><font color=#FF6600><strong>object</strong></font> –複數，表示可以輸出多個對象，用逗號<font color=#FF0000>,</font>分隔。</li><li><font color=#FF6600><strong>sep</strong></font> –間隔多個對象，默認一個空格。</li><li><font color=#FF6600><strong>end</strong></font> –結尾，默認換行符號<font color=#FF0000>\n</font>。</li><li><font color=#FF6600><strong>file</strong></font> –寫入文件對象。</li><li><font color=#FF6600><strong>flush</strong></font> –輸出是否被緩存，由file決定flush=True，會被強制刷新。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;first&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>,sep=<span class="string">&quot;.&quot;</span>) <span class="comment">#間隔</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>,end=<span class="string">&quot;!!&quot;</span>) <span class="comment">#結尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nLoading&quot;</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>,end=<span class="string">&#x27;&#x27;</span>,flush=<span class="literal">True</span>) <span class="comment">#換成False</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 輸出</span></span><br><span class="line"><span class="comment"># first</span></span><br><span class="line"><span class="comment"># first second</span></span><br><span class="line"><span class="comment"># first.second</span></span><br><span class="line"><span class="comment"># first second!!</span></span><br><span class="line"><span class="comment"># Loading....................</span></span><br></pre></td></tr></table></figure><h2 id="格式化字符-一"><a href="#格式化字符-一" class="headerlink" title="格式化字符(一)"></a><font color=#FF6600>格式化字符(一)</font></h2><h3 id="formatting"><a href="#formatting" class="headerlink" title="%-formatting"></a><font color=#008000>%-formatting</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number_name = <span class="string">&quot;圓周率&quot;</span></span><br><span class="line">PI = <span class="number">3.141592</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s: %f&quot;</span> % (number_name,PI))</span><br><span class="line"><span class="comment"># 輸出</span></span><br><span class="line"><span class="comment"># 圓周率: 3.141592</span></span><br></pre></td></tr></table></figure><p><font color=#FF0000><strong>%</strong></font>，可使用不同種字母。</p><table style="border:2px #FF6600 solid;font-weight:bold;">  <tr>    <td style="color:#FF0000;">%s</td>    <td>字串</td>    <td style="color:#FF0000;">%r</td>    <td>非轉義</td>  </tr>  <tr>    <td style="color:#FF0000;">%f、%F</td>    <td>浮點數</td>    <td style="color:#FF0000;">%d</td>    <td>十進制整數</td>  </tr>  <tr>    <td style="color:#FF0000;">%b</td>    <td>二進制整數</td>    <td style="color:#FF0000;">%x</td>    <td>十六進制整數</td>  </tr>  <tr>    <td style="color:#FF0000;">%i</td>    <td>十進制整數(建議用%d)</td>    <td style="color:#FF0000;">%o</td>    <td>八進制整數</td>  </tr>  <tr>    <td style="color:#FF0000;">%e</td>    <td>指數(基底e)</td>    <td style="color:#FF0000;">%E</td>    <td>指數(基底E)</td>  </tr>  <tr>    <td style="color:#FF0000;">%g</td>    <td>指數(e)或浮點數(根據顯示長度)</td>    <td style="color:#FF0000;">%G</td>    <td>指數(E)或浮點數(根據顯示長度)</td>  </tr>  <tr>    <td style="color:#FF0000;">%c</td>    <td>單個字符</td>    <td style="color:#FF0000;">%%</td>    <td>字符%</td>  </tr></table><h3 id="str-format"><a href="#str-format" class="headerlink" title="str.format()"></a><font color=#008000>str.format()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">number_name = <span class="string">&quot;圓周率&quot;</span></span><br><span class="line">PI = <span class="number">3.141592</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(number_name,PI)) <span class="comment">#不指定位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(number_name,PI)) <span class="comment">#指定位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;name&#125;: &#123;number&#125;&quot;</span>.<span class="built_in">format</span>(name=number_name,number=PI)) <span class="comment">#指定參數</span></span><br><span class="line"><span class="comment"># 輸出</span></span><br><span class="line"><span class="comment"># 圓周率: 3.141592</span></span><br><span class="line"><span class="comment"># 圓周率: 3.141592</span></span><br><span class="line"><span class="comment"># 圓周率: 3.141592</span></span><br></pre></td></tr></table></figure><h3 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a><font color=#008000>f-string</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number_name = <span class="string">&quot;圓周率&quot;</span></span><br><span class="line">PI = <span class="number">3.141592</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number_name&#125;</span>: <span class="subst">&#123;PI&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 輸出</span></span><br><span class="line"><span class="comment"># 圓周率: 3.141592</span></span><br></pre></td></tr></table></figure><p><font color=#FF0000><strong>f-string</strong></font>，只是字串的一種用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(r&#x27;\n&#x27;)  # 非轉義，輸出為\n而不是換行，多用於路徑，例如(r&#x27;C:\Users\&#x27;)，也可用(&#x27;C://Users//&#x27;)</span></span><br><span class="line"><span class="comment"># print(b&#x27;&#x27;)  # 輸出Byte</span></span><br><span class="line"><span class="comment"># print(u&#x27;&#x27;)  # Unicode</span></span><br><span class="line"><span class="comment"># print(f&#x27;&#x27;)  # 格式化Format</span></span><br></pre></td></tr></table></figure><h2 id="格式化字符-二"><a href="#格式化字符-二" class="headerlink" title="格式化字符(二)"></a><font color=#FF6600>格式化字符(二)</font></h2><p><strong>字串的限制輸出</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.141592</span></span><br><span class="line">number_name = <span class="string">&quot;圓周率&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s: %.2f&quot;</span> % (number_name,PI)) <span class="comment"># %-formatting</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;number_name&#125;: &#123;number:.2f&#125;&quot;</span>.<span class="built_in">format</span>(number_name=<span class="string">&quot;圓周率&quot;</span>,number=PI)) <span class="comment"># str.format()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number_name&#125;</span>: <span class="subst">&#123;PI:<span class="number">.2</span>f&#125;</span>&quot;</span>) <span class="comment"># f-string</span></span><br></pre></td></tr></table></figure><ul><li><p><font color=#FF0000><strong>%s</strong></font>，用法。</p><ul><li><font color=#FF6600><strong>補齊位置</strong></font> –例如%7s和%-7s，7&gt;字串(原長)=字串(正為左側補齊到七;負為右側)。</li><li><font color=#FF6600><strong>整數</strong></font> –例如%2s和%7s，指字串長度，字串(原長)&gt;2=字串(原長);7&gt;字串(原長)=字串(補齊到七)。</li><li><font color=#FF6600><strong>小數點</strong></font> –例如%0.2s和%0.7s，指擷取長度，字串(Hello)%0.2s為He;%0.7s為Hello。</li><li><font color=#FF6600><strong>整數加小數點</strong></font> –例如%7.2s和%2.7s，字串(Hello)%7.2s為He(補齊到七);%2.7s為Hello。</li><li><font color=#FF6600><em><strong>符號</strong></font> –例如”%</em>.*s” % (2,7,”Hello”)，等同%2.7s。</li></ul></li><li><p><font color=#FF0000><strong>%d</strong></font>，用法。</p><ul><li><font color=#FF6600><strong>補齊位置</strong></font> –例如%3d和%-3d，3&gt;數字長度=數字長度(正為左側補齊到七;負為右側)。</li><li><font color=#FF6600><strong>整數</strong></font> –例如%1d和%3d，指數字長度，長度(原長)&gt;1=長度(原長);3&gt;長度(原長)=長度(補齊到三)。</li><li><font color=#FF6600><strong>小數點</strong></font> –例如%0.3d和%0.003d，指補齊位數，3&gt;位數=位數(用零補齊到三)。</li><li><font color=#FF6600><strong>整數加小數點</strong></font> –例如%5.3d和%05.7d，指補齊位數(小數點先)，3&gt;位數=位數(用零補齊到三)，5時再補兩空格;05再補兩個0。</li><li><font color=#FF6600>*<strong>符號</strong></font> –等同%s用法。</li></ul></li><li><p><font color=#FF0000><strong>%f</strong></font>，用法。</p><ul><li><font color=#FF6600><strong>補齊位置</strong></font> –例如%3f和%-3f，3&gt;數字長度=數字長度(正為左側補齊到三;負為右側)。</li><li><font color=#FF6600><strong>整數</strong></font> –例如%3f和%5f，指數字長度，長度(原長)&gt;1=長度(原長);3&gt;長度(原長)=長度(補齊到三)。</li><li><font color=#FF6600><strong>小數點</strong></font> –例如%0.3f，精準度。</li><li><font color=#FF6600><strong>整數加小數點</strong></font> –例如%5.3f和%05.7f，同整數加上精準度，差異在補0和空格。</li><li><font color=#FF6600>*<strong>符號</strong></font> –等同%s用法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %s介紹，字串 String</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%s!&quot;</span> % string)             <span class="comment"># !hello! </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%2s!&quot;</span> % string)            <span class="comment"># !hello! </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%7s!&quot;</span> % string)            <span class="comment"># !  hello!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%-7s!&quot;</span> % string)           <span class="comment"># !hello  !</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%.2s!&quot;</span> % string)           <span class="comment"># !he!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%.7s!&quot;</span> % string)           <span class="comment"># !hello!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%7.2s!&quot;</span> % string)          <span class="comment"># !     he!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%2.7s!&quot;</span> % string)          <span class="comment"># !hello!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%10.7s!&quot;</span> % string)         <span class="comment"># !     hello!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%*.*s!&quot;</span> % (<span class="number">7</span>, <span class="number">2</span>, string))  <span class="comment"># !     he!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %d介紹，整數 Int</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%d!&quot;</span> % num)                <span class="comment"># !14!     </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%1d!&quot;</span> % num)               <span class="comment"># !14!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%3d!&quot;</span> % num)               <span class="comment"># ! 14!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%-3d!&quot;</span> % num)              <span class="comment"># !14 !</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%05d!&quot;</span> % num)              <span class="comment"># !00014!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%.3d!&quot;</span> % num)              <span class="comment"># !014!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%.0003d!&quot;</span> % num)           <span class="comment"># !014!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%5.3d!&quot;</span> % num)             <span class="comment"># !  014!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%05.3d!&quot;</span> % num)            <span class="comment"># !00014!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%*.*d!&quot;</span> % (<span class="number">5</span>, <span class="number">3</span>, num))     <span class="comment"># !  014!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># %f介紹，浮點數 Float</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3.141592</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%f!&quot;</span> % PI)                 <span class="comment"># !3.141592!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%9f!&quot;</span> % PI)                <span class="comment"># ! 3.141592!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%03.f!&quot;</span> % PI)              <span class="comment"># !003!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%6.3f!&quot;</span> % PI)              <span class="comment"># ! 3.142!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%-6.3f!&quot;</span> % PI)             <span class="comment"># !3.142 !</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;!%*.*f!&quot;</span> % (<span class="number">6</span>, <span class="number">3</span>, PI))      <span class="comment"># ! 3.142! </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h1><ol><li><a href="https://jennaweng0621.pixnet.net/blog/post/403957928-anaconda%E6%8C%87%E4%BB%A4%E6%87%89%E7%94%A8%E7%B8%BD%E6%95%B4%E7%90%86">https://jennaweng0621.pixnet.net/blog/post/403957928-anaconda%E6%8C%87%E4%BB%A4%E6%87%89%E7%94%A8%E7%B8%BD%E6%95%B4%E7%90%86</a></li><li><a href="https://zhuanlan.zhihu.com/p/60647332">https://zhuanlan.zhihu.com/p/60647332</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3使用筆記</title>
      <link href="/HexoBlog/2021/12/07/Vue3%E4%BD%BF%E7%94%A8%E7%AD%86%E8%A8%98/"/>
      <url>/HexoBlog/2021/12/07/Vue3%E4%BD%BF%E7%94%A8%E7%AD%86%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<p>🚀🚀 <strong>由於 Vue.js 官方團隊已在 2020/09/18 正式發佈 Vue 3.0 版本，所以介紹一些Vue3的大概寫法，還有Vue cli和官方套件的使用方式。</strong></p><p> ⚡️⚡️ <font color=#FF0000><strong>Vue 開發推薦網站</strong></font> ⚡️⚡️</p><ol><li><a href="https://fontawesome.com/"><font color=#FF6600><strong>Font Awesome V5 圖標</strong></font></a></li><li><a href="https://element-plus.org/en-US/#/zh-CN"><font color=#FF6600><strong>Element ui</strong></font></a></li><li><a href="https://youzan.github.io/vant/#/zh-CN/"><font color=#FF6600><strong>Vant</strong></font></a></li><li><a href="https://vuetifyjs.com/en/"><font color=#FF6600><strong>Vuetify</strong></font></a></li><li><a href="https://vuejsexamples.com/"><font color=#FF6600><strong>Vue.js Examples</strong></font></a></li><li><a href="https://vueuse.org/"><font color=#FF6600><strong>VueUse</strong></font></a></li></ol><h2 id="📂-Vue-cli的目錄結構："><a href="#📂-Vue-cli的目錄結構：" class="headerlink" title="📂　Vue cli的目錄結構："></a>📂　<font color=#FF6600>Vue cli的目錄結構：</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">📂project_name/ 項目目錄</span><br><span class="line">  |</span><br><span class="line">  |--📂dist/  部屬檔案，npm run build 指令所產生</span><br><span class="line">  |--📂node_modules/  放 npm install 套件</span><br><span class="line">  |--📂public/  放 index.html，自訂logo也可放這，引用方式等同favicon.ico</span><br><span class="line">  |    |--📄favicon.ico  /網站logo圖示</span><br><span class="line">  |    |--📄index.html   /cdn加入的位置，也是網站顯示的檔案</span><br><span class="line">  |--📂src/ 主要開發資料夾</span><br><span class="line">  |    |</span><br><span class="line">  |    |--📂assets/ 靜態文件目錄(css、image)</span><br><span class="line">  |    |--📂components/ 組件相關樣式(佈局組件、常用組件)</span><br><span class="line">  |    |    |--📄HelloWorld.vue🆅🆄🅴 /專案創建檔</span><br><span class="line">  |    |--📂router/ 路由，創建時加入vue-router</span><br><span class="line">  |    |    |--📄index.js🅹🆂 /路由配置</span><br><span class="line">  |    |--📂store/ vuex，創建時加入vuex</span><br><span class="line">  |    |    |--📄index.js🅹🆂 /vuex配置</span><br><span class="line">  |    |--📂config/ 自定義js檔引入，自行創建</span><br><span class="line">  |    |    |--📄example.js🅹🆂 /引入方法 import &#123; export_example &#125; from &quot;@/config/example&quot;;</span><br><span class="line">  |    |--📂view/ 頁面檔案，沒有可自行創建</span><br><span class="line">  |    |    |--📄Home.vue🆅🆄🅴 /專案創建檔</span><br><span class="line">  |    |    |--📄About.vue🆅🆄🅴 /專案創建檔</span><br><span class="line">  |    |--📄App.vue🆅🆄🅴  /專案創建檔，彙總所有vue檔 (Home.vue➙➙App.vue➙➙index.html)</span><br><span class="line">  |    |--📄main.js🅹🆂   /vue全域套件匯入使用</span><br><span class="line">  |--📄.env.local /本地環境變數，自行創建。命名 (VUE_APP_)開頭，引用 process.env.VUE_APP_XXXXX</span><br><span class="line">  |--📄.gitignore /上傳遠端時略過的檔案</span><br><span class="line">  |--📄babel.config.js /Babel配置檔</span><br><span class="line">  |--📄deploy.sh  /powershell命令檔，自動部屬遠端使用，自行創建</span><br><span class="line">  |--📄package-lock.json /引用套件目錄</span><br><span class="line">  |--📄package.json /引用套件目錄</span><br><span class="line">  |--📄README.md /自訂使用說明</span><br><span class="line">  |--📄vue.config.js /遠端部屬使用，，自行創建</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#FF0000><strong>vue.config.js</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/VueImplement/&quot;</span> : <span class="string">&quot;/&quot;</span>, <span class="comment">//VueImplement部屬的子路由，沒有可直接(/)。</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123; <span class="comment">// 為防止限制大小</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      config.mode = <span class="string">&quot;production&quot;</span>;</span><br><span class="line">      config.performance = &#123;</span><br><span class="line">        <span class="attr">maxEntrypointSize</span>: <span class="number">10000000</span>,</span><br><span class="line">        <span class="attr">maxAssetSize</span>: <span class="number">30000000</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font color=#FF0000><strong>deploy.sh</strong></font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当发生错误时中止脚本</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd 到构建输出的目录下 </span></span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到自定义域域名</span></span><br><span class="line"><span class="comment"># echo &#x27;www.example.com&#x27; &gt; CNAME</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# your-project</span></span><br><span class="line"><span class="string">vue cli 功能實作</span></span><br><span class="line"><span class="string">網址，https://your-github-name.github.io/your-project/&quot;</span> &gt;&gt; README.md</span><br><span class="line"></span><br><span class="line"><span class="comment">#github個人網頁刷新時防止404 </span></span><br><span class="line">cp index.html 404.html </span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網址在vue.config.js設定</span></span><br><span class="line"><span class="comment"># 部署到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line">git push -f https://github.com/your-github-name/your-github-name.git master:gh-pages</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>請先在電腦設定git，之後在<font color=#FF0000><strong>git bash</strong></font>使用<font color=#FF0000><strong>sh deploy.sh</strong></font></p><h2 id="⭐生命週期改變"><a href="#⭐生命週期改變" class="headerlink" title="⭐生命週期改變"></a><font color=#FF6600>⭐生命週期改變</font></h2><table style="border:2px #FF6600 solid;font-weight:bold;">  <tr style="color:#FF0000;">    <td >Vue2</td>    <td>Vue3(對應 Vue 3.0 Composition API)</td>    <td>說明</td>  </tr>  <tr>    <td>beforeCreate</td>    <td>setup()</td>    <td>Vue 實體被建立，狀態與事件都尚未初始化</td>  </tr>  <tr>    <td>created</td>    <td>setup()</td>    <td>Vue 實體已建立，狀態與事件已初始化完成(prop、data、computed 等屬性已建立，vm.$el 屬性無法使用)</td>  </tr>  <tr>    <td>beforeMount</td>    <td>onBeforeMonut</td>    <td>Vue 實體尚未與模板 (DOM 節點) 綁定</td>  </tr>  <tr>    <td>mounted</td>    <td>onMounted</td>    <td>Vue 實體與掛載完成， el 的目標 DOM 被 $el 所替換 (可以視作 jQuery 的 Ready)</td> </tr> <tr>    <td>beforeUpdate</td>    <td>onBeforeUpdate</td>    <td>當狀態被變動時，畫面同步更新前</td> </tr> <tr>    <td>updated</td>    <td>onUpdated</td>    <td>當狀態被變動時，畫面已同步更新完成</td> </tr> <tr>    <td>beforeDestroy</td>    <td>onBeforeUnmount</td>    <td>Vue 實體物件被銷毀前</td> </tr> <tr>    <td>destroyed</td>    <td>onUnmounted</td>    <td>Vue 實體物件被銷毀完畢</td> </tr> <tr>    <td>errorCaptured</td>    <td>onErrorCaptured</td>    <td>子/孫代元件的錯誤被捕獲時觸發</td> </tr> <tr>    <td>activated</td>    <td> --</td>    <td>Vue 元件被啟動時觸發，搭配 keep-alive 使用</td> </tr> <tr>    <td>deactivated</td>    <td> --</td>    <td>Vue 元件被解除時觸發，搭配 keep-alive 使用</td> </tr></table><h2 id="⭐vue3-data、method、computer、watch、生命週期使用"><a href="#⭐vue3-data、method、computer、watch、生命週期使用" class="headerlink" title="⭐vue3(data、method、computer、watch、生命週期使用)"></a><font color=#FF6600>⭐vue3(data、method、computer、watch、生命週期使用)</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;TestView /&gt;</span><br><span class="line">&#123;&#123; testprops &#125;&#125;</span><br><span class="line">&#123;&#123; data3.test1 &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Test from &quot;@/components/Test.vue&quot;; //引入Composition API</span><br><span class="line">import &#123; ref, toRefs, reactive, computed, watch, watchEffeect, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;example&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    testprops: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    TestView: Test,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">     </span><br><span class="line">    //data使用 </span><br><span class="line">    const data1 = ref.(1);</span><br><span class="line">    const data2 = ref.(&#123; id: 2 &#125;);</span><br><span class="line">    console.log(data1.value); //每次使用都要用.value，所以使用reactive比較方便</span><br><span class="line"></span><br><span class="line">    const data3 = reactive(&#123;</span><br><span class="line">      test1: 3,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //method使用</span><br><span class="line">    function testmethod1() &#123;</span><br><span class="line">        console.log(&quot;test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const testmethod2 = () =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    //computed使用</span><br><span class="line">    const testcomputed = computed(() =&gt; &#123;</span><br><span class="line">        return &quot;Number is : $&#123;data1.value&#125;&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //watch使用，監控ref物件</span><br><span class="line">    watch(data1, (newdata1, olddata1) =&gt; &#123;</span><br><span class="line">      console.log(</span><br><span class="line">        &quot;ref 資料&quot; + data1.value + &quot; 的監控&quot;,</span><br><span class="line">        &quot;新：&quot; + newdata1 + &quot;，舊：&quot; + olddata1</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; data2.value.id,</span><br><span class="line">      (newid, oldid) =&gt; &#123;</span><br><span class="line">        console.log(</span><br><span class="line">          &quot;ref 單一物件 getter=&quot; + data2.value.id + &quot; 的監控&quot;,</span><br><span class="line">          &quot;新：&quot; + newid + &quot;，舊：&quot; + oldid</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      data2,</span><br><span class="line">      (newdata2, olddata2) =&gt; &#123;</span><br><span class="line">        console.log(</span><br><span class="line">          &quot;ref 整個物件=&quot; + data2.value.id + &quot; 的深層監控&quot;,</span><br><span class="line">          &quot;新：&quot; + newdata2.id + &quot;，舊：&quot; + olddata2.id</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        deep: true, //深層監控</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    //watch使用，監控reactive物件</span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; data3.test1,</span><br><span class="line">      (newtest1, oldtest1) =&gt; &#123;</span><br><span class="line">        console.log(</span><br><span class="line">          &quot;reactive 單一物件 getter=&quot; + data3.test1 + &quot; 的監控&quot;,</span><br><span class="line">          &quot;新：&quot; + newtest1 + &quot;，舊：&quot; + oldtest1</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    watch(data3, (newdata3, olddata3) =&gt; &#123;</span><br><span class="line">      console.log(</span><br><span class="line">        &quot;reactive 整個物件=&quot; + data3.test1 + &quot; 的監控&quot;,</span><br><span class="line">        &quot;新：&quot; + newdata3.test1 + &quot;，舊：&quot; + olddata3.test1</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //watchEffect使用，不須傳入監聽參數</span><br><span class="line">    watchEffect(() =&gt; &#123;</span><br><span class="line">      console.log(&quot;watchEffect 監控 ref 資料 = &quot; + data1.value);</span><br><span class="line">      console.log(&quot;watchEffect 監控 ref 物件 = &quot; + data2.value.id);</span><br><span class="line">      console.log(&quot;watchEffect 監控 reactive 物件 = &quot; + data3.test1);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //生命週期使用</span><br><span class="line">    onMounted(() =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(data3),</span><br><span class="line">      testmethod1,</span><br><span class="line">      testmethod2,</span><br><span class="line">      testcomputed,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="⭐vue3，vue-router使用"><a href="#⭐vue3，vue-router使用" class="headerlink" title="⭐vue3，vue-router使用"></a><font color=#FF6600>⭐vue3，vue-router使用</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 根據路由配置 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/&quot;&gt;&lt;/router-link&gt; &lt;!-- vue cli --&gt;</span><br><span class="line">&lt;!-- &lt;nuxt-link :to=&quot;&#123; name: &#x27;page&#x27; &#125;&quot;&gt;&lt;/nuxt-link&gt; --&gt;&lt;!-- nuxt.js --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useRouter, onBeforeRouteLeave &#125; from &quot;vue-router&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;example&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">     </span><br><span class="line">    //路由使用</span><br><span class="line">    const router = useRouter();</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">        //vue cli 要在router/index.js配置，而nuxt.js會根據資料夾自動配置，除非需要路由守衛</span><br><span class="line">        router.push(&#123; name: &quot;router-test1&quot; &#125;);    //有歷史紀錄</span><br><span class="line">        router.replace(&#123; name: &quot;router-test2&quot; &#125;); //不會有歷史紀錄</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //路由守衛使用</span><br><span class="line">    onBeforeRouteLeave((to, from, next) =&gt; &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-router配置-vue-cli"><a href="#vue-router配置-vue-cli" class="headerlink" title="vue-router配置(vue cli)"></a><font color=#008000>vue-router配置(vue cli)</font></h3><p><font color=#FF0000><strong>router/index.js</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;../views/About.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Home,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: About,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;, <span class="comment">//需要驗證</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 路由比對失敗跳到主頁</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:pathMatch(.*)*&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由守衛</span></span><br><span class="line">router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.requiresAuth) &#123;</span><br><span class="line">    <span class="comment">// next(&#123; name: &quot;Home&quot; &#125;);</span></span><br><span class="line">    next(); <span class="comment">//跳轉成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h2 id="⭐vue3，vuex使用"><a href="#⭐vue3，vuex使用" class="headerlink" title="⭐vue3，vuex使用"></a><font color=#FF6600>⭐vue3，vuex使用</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;example&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">     </span><br><span class="line">    //vuex使用 </span><br><span class="line">    const store = useStore();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">        let test = &quot;test&quot;;</span><br><span class="line">        let data = store.state.api.test;  //取得api module資料</span><br><span class="line">        store.dispatch(&quot;auth/test&quot;, test); //修改auth module狀態</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="vuex，module管理"><a href="#vuex，module管理" class="headerlink" title="vuex，module管理"></a><font color=#008000>vuex，module管理</font></h3><p><font color=#FF0000><strong>store/index.js</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> auth <span class="keyword">from</span> <span class="string">&quot;./auth&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&quot;./api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123; auth, api &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><font color=#FF0000><strong>store/api.js</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//儲存的資料</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="string">&quot;one&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改變state資料，只處理同步動作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相當於methods</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相當於computed</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font color=#FF0000><strong>store/auth.js</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//儲存的資料</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改變state資料，只處理同步動作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="function"><span class="title">Task1</span>(<span class="params">state, data</span>)</span> &#123;</span><br><span class="line">    state.data.user = data;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">Task2</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.data.user = <span class="string">`two`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相當於methods</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">UpdateTask1</span>(<span class="params">event, data</span>)</span> &#123;</span><br><span class="line">    event.commit(<span class="string">`Task1`</span>, data); <span class="comment">//帶參數</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">UpdateTask2</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    event.commit(<span class="string">`Task2`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相當於computed</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> web </tag>
            
            <tag> vue.js </tag>
            
            <tag> vue3 </tag>
            
            <tag> vue cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6~ES12介紹</title>
      <link href="/HexoBlog/2021/11/20/ES6-ES12%E4%BB%8B%E7%B4%B9/"/>
      <url>/HexoBlog/2021/11/20/ES6-ES12%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<p> 📢 眾所周知，<font color=#FF0000><strong>ECMAScript</strong></font> 的迭代是很快的，自ES6(es2015)版本起，跟過去的版本比改動較大，本文集合了 ES6 至 ES11 常用到的特性，包括還在規劃的 ES12，只列舉了大概使用。</p><ul><li>⭐⭐ <font color=#FF0000><strong>javascript的參數類型:</strong></font> ⭐⭐<ul><li><strong>Boolean</strong></li><li><strong>Null</strong></li><li><strong>Undefined</strong></li><li><strong>Number</strong></li><li><strong>String</strong></li><li><strong>Symbol (ES6)</strong></li><li><strong>BigInt (ES10)</strong></li></ul></li></ul><h2 id="⭐ES6-2015"><a href="#⭐ES6-2015" class="headerlink" title="⭐ES6(2015)"></a><font color=#FF6600>⭐ES6(2015)</font></h2><h3 id="⭐let-和-const"><a href="#⭐let-和-const" class="headerlink" title="⭐let 和 const"></a><font color=#008000>⭐let 和 const</font></h3><p>在ES6之前，js只有 <font color=#FF0000><strong>var</strong></font> 一種宣告方式。但是在ES6之後，多了 <font color=#FF0000><strong>let</strong></font> 和<font color=#FF0000><strong>const</strong></font>兩種方式。用 <strong>var</strong> 沒有區域變數概念，而 <strong>let</strong> 和 <strong>const</strong> 都可做為區域變數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="number">30</span>;</span><br><span class="line">  <span class="comment">//let可以變更，而const不可變更</span></span><br><span class="line">  b = <span class="number">30</span>;</span><br><span class="line">  c = <span class="number">40</span>;<span class="comment">// Uncaught TypeError: Assignment to constant variable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//let和const皆為區域變數，只能在宣告的區域內使用</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// UncaughtReferenceError: b is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// UncaughtReferenceError: c is not defined</span></span><br></pre></td></tr></table></figure><h3 id="⭐物件-Class"><a href="#⭐物件-Class" class="headerlink" title="⭐物件 (Class)"></a><font color=#008000>⭐物件 (Class)</font></h3><p>在 <strong>ES6</strong> 之前物件的方式都是與原型鏈相關的，在 <strong>ES6</strong> 出现了<font color=#FF0000><strong>class</strong></font>用來構造一個物件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.information = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;My name is &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;, I am &#x27;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">information</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;My name is &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;, I am &#x27;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⭐箭頭函數（Arrow-function）"><a href="#⭐箭頭函數（Arrow-function）" class="headerlink" title="⭐箭頭函數（Arrow function）"></a><font color=#008000>⭐箭頭函數（Arrow function）</font></h3><p><strong>箭頭函數</strong>表達式的語法比<strong>函數表達式</strong>更簡潔，並且沒有自己的<font color=#FF0000><strong>this</strong></font>、<font color=#FF0000><strong>arguments</strong></font>、<font color=#FF0000><strong>super</strong></font>或 <font color=#FF0000><strong>new.target</strong></font>。這些函數表達式更適用於那些本來需要匿名函數的地方，並且它們不能用作構造函數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newList = list.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * item;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> newList = list.map(<span class="function"><span class="params">item</span> =&gt;</span> item * item);</span><br></pre></td></tr></table></figure><h3 id="⭐函數參數默認值（Function-parameter-defaults）"><a href="#⭐函數參數默認值（Function-parameter-defaults）" class="headerlink" title="⭐函數參數默認值（Function parameter defaults）"></a><font color=#008000>⭐函數參數默認值（Function parameter defaults）</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = data || <span class="string">&#x27;data is empty&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//但參數為布林值的false時永遠為後值</span></span><br><span class="line">config(<span class="number">0</span>); <span class="comment">// data is empty</span></span><br><span class="line">config(<span class="string">&#x27;&#x27;</span>); <span class="comment">// data is empty</span></span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="function">(<span class="params">data = <span class="string">&#x27;data is empty&#x27;</span></span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="模板字串符（Template-string）"><a href="#模板字串符（Template-string）" class="headerlink" title="模板字串符（Template string）"></a><font color=#008000>模板字串符（Template string）</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;testname&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> info = <span class="string">&#x27;My name is &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;, I am &#x27;</span> + <span class="built_in">this</span>.age;</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;testname&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> info = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>, I am <span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h3 id="⭐解構賦值（Destructuring-assignment）"><a href="#⭐解構賦值（Destructuring-assignment）" class="headerlink" title="⭐解構賦值（Destructuring assignment）"></a><font color=#008000>⭐解構賦值（Destructuring assignment）</font></h3><p>我們通過解構賦值，可以將屬性/值從對象/數組中取出,賦值給其它變數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><h3 id="⭐模組化（Module）"><a href="#⭐模組化（Module）" class="headerlink" title="⭐模組化（Module）"></a><font color=#008000>⭐模組化（Module）</font></h3><p>在ES6前沒有模組化的概念。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; PI &#125; = <span class="built_in">Math</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="built_in">exports</span>.area = <span class="function">(<span class="params">r</span>) =&gt;</span> PI * r ** <span class="number">2</span>;</span><br><span class="line"><span class="built_in">exports</span>.circumference = <span class="function">(<span class="params">r</span>) =&gt;</span> <span class="number">2</span> * PI * r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 输入circle.js模組</span></span><br><span class="line"><span class="keyword">const</span> circle = <span class="built_in">require</span>(<span class="string">&#x27;./circle.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`半径为 4 的圆的面积是 <span class="subst">$&#123;circle.area(<span class="number">4</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="擴展操作符（Spread-operator）"><a href="#擴展操作符（Spread-operator）" class="headerlink" title="擴展操作符（Spread operator）"></a><font color=#008000>擴展操作符（Spread operator）</font></h3><p>擴展操作符可以在函數調用/數組構造時, 將數組表達式或者string在語法層面展開；還可以在構造dict類Object, 將Object表達式key-value的方式展開。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> total = sum.apply(<span class="literal">null</span>, list);</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">x, y, z</span>) =&gt;</span> x + y + z;</span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> total = sum(...list);</span><br><span class="line"><span class="comment">//注意，擴展操作符只可用於可迭代對象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> array = [...obj]; <span class="comment">// TypeError: obj is not iterable</span></span><br></pre></td></tr></table></figure><h3 id="⭐對象屬性簡寫（Object-attribute-shorthand）"><a href="#⭐對象屬性簡寫（Object-attribute-shorthand）" class="headerlink" title="⭐對象屬性簡寫（Object attribute shorthand）"></a><font color=#008000>⭐對象屬性簡寫（Object attribute shorthand）</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="string">&#x27;Miaow&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="string">&#x27;Woof&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> bird = <span class="string">&#x27;Peet peet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someObject = &#123;</span><br><span class="line">  <span class="attr">cat</span>: cat,</span><br><span class="line">  <span class="attr">dog</span>: dog,</span><br><span class="line">  <span class="attr">bird</span>: bird</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line"><span class="keyword">let</span> cat = <span class="string">&#x27;Miaow&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">&#x27;Woof&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> bird = <span class="string">&#x27;Peet peet&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> someObject = &#123;</span><br><span class="line">  cat,</span><br><span class="line">  dog,</span><br><span class="line">  bird</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(someObject);</span><br><span class="line"><span class="comment">//&#123; cat: &quot;Miaow&quot;,dog: &quot;Woof&quot;,bird: &quot;Peet peet&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="⭐Promise"><a href="#⭐Promise" class="headerlink" title="⭐Promise"></a><font color=#008000>⭐Promise</font></h3><p><strong>Promise</strong> 是ES6提供的一種<font color=#FF0000><strong>異步</strong></font>解決方案，比回調函數更加清晰明瞭，並且<strong>Promise</strong>有三種狀態，分別是:<br>  <strong>1.等待中（pending）</strong><br>  <strong>2.完成了（resolved）</strong><br>  <strong>3.拒絕了（rejected）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise 一旦從等待狀態轉變為其它就不能再更改狀態了</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  reject(<span class="string">&#x27;fail&#x27;</span>);<span class="comment">//無效</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Promise 內是立即執行的</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">  resolve(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line"><span class="comment">// test1</span></span><br><span class="line"><span class="comment">// test2</span></span><br></pre></td></tr></table></figure><p><strong>Promise</strong>實現了鏈式調用，也就是每次調用<strong>then</strong>之後返回的都是一個<strong>新的 Promise</strong>，因為原來<strong>狀態不可變</strong>。<br>如果你在<strong>then</strong> 中 使用了<strong>return</strong>，那麼return 的值會被<font color=#FF0000><strong>Promise.resolve()</strong></font>包裝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> <span class="comment">// 包装成 Promise.resolve(2)</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// =&gt; 2</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>當然了，<strong>Promise</strong> 也很好地解决了回調地獄的問題，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6前</span></span><br><span class="line">ajax(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 處理邏輯</span></span><br><span class="line">    ajax(url1, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 處理邏輯</span></span><br><span class="line">        ajax(url2, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 處理邏輯</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ES6後</span></span><br><span class="line">ajax(url)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">      <span class="keyword">return</span> ajax(url1);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">      <span class="keyword">return</span> ajax(url2);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure><h3 id="⭐for…of"><a href="#⭐for…of" class="headerlink" title="⭐for…of"></a><font color=#008000>⭐for…of</font></h3><p><strong>for…of</strong>語句再可迭代對象（包括 <strong>Array、Map、Set、String、TypedArray、arguments</strong> 對象等等）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> array1) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure><h3 id="⭐Symbol"><a href="#⭐Symbol" class="headerlink" title="⭐Symbol"></a><font color=#008000>⭐Symbol</font></h3><p><strong>Symbol</strong> 是一種基本數據類型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="built_in">Symbol</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> symbol3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> symbol1); <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(symbol3.toString()); <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>) === <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="⭐迭代器（Iterator）-生成器（Generator）"><a href="#⭐迭代器（Iterator）-生成器（Generator）" class="headerlink" title="⭐迭代器（Iterator）/ 生成器（Generator）"></a><font color=#008000>⭐迭代器（Iterator）/ 生成器（Generator）</font></h3><p>迭代器可以通過重複調用<font color=#FF0000><strong>next()</strong></font>來顯示迭代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function* 宣告Generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">makeRangeIterator</span>(<span class="params">start = <span class="number">0</span>, end = <span class="literal">Infinity</span>, step = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i += step) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = makeRangeIterator(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">a.next() <span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line">a.next() <span class="comment">// &#123;value: 3, done: false&#125;</span></span><br><span class="line">a.next() <span class="comment">// &#123;value: 5, done: false&#125;</span></span><br><span class="line">a.next() <span class="comment">// &#123;value: 7, done: false&#125;</span></span><br><span class="line">a.next() <span class="comment">// &#123;value: 9, done: false&#125;</span></span><br><span class="line">a.next() <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Set-WeakSet"><a href="#Set-WeakSet" class="headerlink" title="Set/WeakSet"></a><font color=#008000>Set/WeakSet</font></h3><p><strong>Set</strong>允許儲存任何類型唯一值，<font color=#FF0000><strong>即不含重複</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(numbers)]) ;</span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 6, 7, 32]</span></span><br></pre></td></tr></table></figure><p><strong>WeakSet</strong>和<strong>Set</strong>類似，但有兩點區別；</p><ul><li><strong>WeakSet</strong>只能引用，<font color=#FF0000><strong>不能直接放值</strong></font>。</li><li><strong>WeakSet</strong>是弱引用的意思，如果沒有變量或屬性引用，則會被回收機制回收掉。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">var</span> test1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> test2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">ws.add(<span class="built_in">window</span>);</span><br><span class="line">ws.add(test1);</span><br><span class="line"></span><br><span class="line">ws.has(<span class="built_in">window</span>);  <span class="comment">// true</span></span><br><span class="line">ws.has(test2);   <span class="comment">// false, 對象test1沒有被引用</span></span><br><span class="line"></span><br><span class="line">ws.delete(<span class="built_in">window</span>); <span class="comment">// 從集合中刪除window對象</span></span><br><span class="line">ws.has(<span class="built_in">window</span>);    <span class="comment">// false, window對象已經被刪除了</span></span><br><span class="line"></span><br><span class="line">ws.clear(); <span class="comment">// 清空整個WeakSet</span></span><br></pre></td></tr></table></figure><h3 id="⭐Map-WeakMap"><a href="#⭐Map-WeakMap" class="headerlink" title="⭐Map/WeakMap"></a><font color=#008000>⭐Map/WeakMap</font></h3><p><strong>Map</strong> 保存鍵值物件<font color=#FF0000><strong>(key-value)</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">myMap.set(<span class="literal">NaN</span>, <span class="string">&quot;not a number&quot;</span>);</span><br><span class="line"></span><br><span class="line">myMap.get(<span class="literal">NaN</span>); <span class="comment">// &quot;not a number&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="built_in">Number</span>(<span class="string">&quot;test1value&quot;</span>);</span><br><span class="line">myMap.get(test1); <span class="comment">// &quot;not a number&quot;</span></span><br></pre></td></tr></table></figure><p><strong>WeakMap</strong>和<strong>Map</strong> 跟Set和WeakSet區別相似，如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wm1 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">    wm2 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">    wm3 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;,</span><br><span class="line">    o2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    o3 = <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">wm1.set(o1, <span class="number">37</span>);</span><br><span class="line">wm1.set(o2, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">wm2.set(o1, o2); <span class="comment">// value可以是任一值或對象</span></span><br><span class="line">wm2.set(o3, <span class="literal">undefined</span>);</span><br><span class="line">wm2.set(wm1, wm2); <span class="comment">// key和value可以是任一對象，甚至另一個WeakMap</span></span><br><span class="line">wm1.get(o2); <span class="comment">// &quot;test&quot;</span></span><br><span class="line">wm2.get(o2); <span class="comment">// undefined,wm2中沒有o2這個key</span></span><br><span class="line">wm2.get(o3); <span class="comment">// undefined,值就是undefined</span></span><br><span class="line"></span><br><span class="line">wm1.has(o2); <span class="comment">// true</span></span><br><span class="line">wm2.has(o2); <span class="comment">// false</span></span><br><span class="line">wm2.has(o3); <span class="comment">// true (即使值是undefined)</span></span><br><span class="line"></span><br><span class="line">wm3.set(o1, <span class="number">37</span>);</span><br><span class="line">wm3.get(o1); <span class="comment">// 37</span></span><br><span class="line">wm3.clear();</span><br><span class="line">wm3.get(o1); <span class="comment">// undefined,wm3已被清空</span></span><br><span class="line">wm1.has(o1);   <span class="comment">// true</span></span><br><span class="line">wm1.delete(o1);</span><br><span class="line">wm1.has(o1);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Proxy-Reflect"><a href="#Proxy-Reflect" class="headerlink" title="Proxy/Reflect"></a><font color=#008000>Proxy/Reflect</font></h3><ul><li><strong>Proxy</strong> 對象用於定義基本操作的自定義行為（如屬性查找，賦值，枚舉，函數調用等）。</li><li><strong>Reflect</strong> 是一個內置的物件。</li></ul><p><font color=#FF0000><strong>Proxy</strong></font>跟<font color=#FF0000><strong>Reflect</strong></font>是非常完美的配合，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observe = <span class="function">(<span class="params">data, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">            <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">set</span>(<span class="params">target, key, value, proxy</span>)</span> &#123;</span><br><span class="line">                  callback(key, value);</span><br><span class="line">                  target[key] = value;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FooBar = &#123; <span class="attr">open</span>: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> FooBarObserver = observe(FooBar, <span class="function">(<span class="params">property, value</span>) =&gt;</span> &#123;</span><br><span class="line">  property === <span class="string">&#x27;open&#x27;</span> &amp;&amp; value </span><br><span class="line">          ? <span class="built_in">console</span>.log(<span class="string">&#x27;FooBar is open!!!&#x27;</span>) </span><br><span class="line">          : <span class="built_in">console</span>.log(<span class="string">&#x27;keep waiting&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(FooBarObserver.open); <span class="comment">// false</span></span><br><span class="line">FooBarObserver.open = <span class="literal">true</span>; <span class="comment">// FooBar is open!!!</span></span><br></pre></td></tr></table></figure><p>當然也不是什麼都可以被代理的，如果物件帶有<font color=#FF0000><strong>configurable: false</strong></font> 和 <font color=#FF0000><strong>writable: false</strong></font>屬性，則代理失效。</p><h3 id="Regex正規的擴展"><a href="#Regex正規的擴展" class="headerlink" title="Regex正規的擴展"></a><font color=#008000>Regex正規的擴展</font></h3><ul><li><strong>正規新增符號</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i 修飾符</span></span><br><span class="line">/[a-z]/i.test(<span class="string">&#x27;\u212A&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="regexp">/[a-z]/iu</span>.test(<span class="string">&#x27;\u212A&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// y 修飾符</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;aaa_aa_a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> r1 = <span class="regexp">/a+/g</span>;</span><br><span class="line"><span class="keyword">var</span> r2 = <span class="regexp">/a+/y</span>;</span><br><span class="line"></span><br><span class="line">r1.exec(s); <span class="comment">// [&quot;aaa&quot;]</span></span><br><span class="line">r2.exec(s); <span class="comment">// [&quot;aaa&quot;]</span></span><br><span class="line"></span><br><span class="line">r1.exec(s); <span class="comment">// [&quot;aa&quot;]</span></span><br><span class="line">r2.exec(s); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String.prototype.flags，查看RegExp構造函數的修飾符</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;xyz&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">regex.flags <span class="comment">// &#x27;i&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unicode模式</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;𠮷&#x27;</span></span><br><span class="line">/^.$/.test(s) <span class="comment">// false</span></span><br><span class="line">/^.$/u.test(s) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// u轉義</span></span><br><span class="line">/\,<span class="regexp">/ /</span><span class="regexp">/ /</span>\,/</span><br><span class="line"><span class="regexp">/\,/u</span> <span class="comment">// 報錯 沒有u修飾符時，逗號前面的反斜線是無效的，加了u修飾符就報錯。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/</span>;</span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!abc&#x27;</span>);<span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!ab&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\1$/</span>;</span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!abc&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">RE_TWICE.test(<span class="string">&#x27;abc!ab&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>字串方法的改為調用RegExp</strong></p><ul><li><strong>String.prototype.match</strong>   調用 <strong>RegExp.prototype[Symbol.match]</strong></li><li><strong>String.prototype.replace</strong> 調用 <strong>RegExp.prototype[Symbol.replace]</strong></li><li><strong>String.prototype.search</strong>  調用 <strong>RegExp.prototype[Symbol.search]</strong></li><li><strong>String.prototype.split</strong>   調用 <strong>RegExp.prototype[Symbol.split]</strong></li></ul></li><li><p><strong>正規新增屬性</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RegExp.prototype.sticky 表示是否有y修飾符</span></span><br><span class="line">/hello\d/y.sticky <span class="comment">// true</span></span><br><span class="line"><span class="comment">// RegExp.prototype.flags獲取修飾符</span></span><br><span class="line">/abc/ig.flags <span class="comment">// &#x27;ig&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Math物件的擴展"><a href="#Math物件的擴展" class="headerlink" title="Math物件的擴展"></a><font color=#008000>Math物件的擴展</font></h3><ul><li><strong>二進表示法:0b或0B開頭表示二進制0bXX或0BXX</strong></li><li><strong>二進表示法:0b或0B開頭表示二進制0bXX或0BXX</strong></li><li><strong>八進表示法:0o或0O開頭表示二進制0oXX或0OXX</strong></li><li><strong>Number.EPSILON : 數值最小精度</strong></li><li><strong>Number.MIN_SAFE_INTEGER: 最小安全數值(-2^53)</strong></li><li><strong>Number.MAX_SAFE_INTEGER: 最大安全數值(2^53)</strong></li><li><strong>Number.parseInt() : 返回轉換值的整數部分</strong></li><li><strong>Number.parseFloat() : 返回轉換值的浮點數部分</strong></li><li><strong>Number.isFinite() : 是否為有限數值</strong></li><li><strong>Number.isNaN() : 是否為NaN</strong></li><li><strong>Number.isInteger() : 是否為整數</strong></li><li><strong>Number.isSafeInteger() : 是否在數值安全範圍內</strong></li><li><strong>Math.trunc() : 返回數值整數部分</strong></li><li><strong>Math.sign(): 返回數值類型(正數1、負數-1、零0)</strong></li><li><strong>Math.cbrt() : 返回數值立方根</strong></li><li><strong>Math.clz32() : 返回數值的32位無符號整數形式</strong></li><li><strong>Math.imul() : 返回兩個數值相乘</strong></li><li><strong>Math.fround() : 返回數值的32位單精度浮點數形式</strong></li><li><strong>Math.hypot() : 返回所有數值平方和的平方根</strong></li><li><strong>Math.expm1() : 返回e^n - 1</strong></li><li><strong>Math.log1p(): 返回1 + nMath.log(1 + n)</strong></li><li><strong>Math.log10() : 返回以10為底的n的對數</strong></li><li><strong>Math.log2() : 返回以2為底的n的對數</strong></li><li><strong>Math.sinh() : 返回n的雙曲正弦</strong></li><li><strong>Math.cosh() : 返回n的雙曲餘弦</strong></li><li><strong>Math.tanh() : 返回n的雙曲正切</strong></li><li><strong>Math.asinh() : 返回n的反雙曲正弦</strong></li><li><strong>Math.acosh() : 返回n的反雙曲餘弦</strong></li><li><strong>Math.atanh() : 返回n的反雙曲正切</strong></li></ul><h3 id="Array物件的擴展"><a href="#Array物件的擴展" class="headerlink" title="Array物件的擴展"></a><font color=#008000>Array物件的擴展</font></h3><ul><li><strong>Array.prototype.from：轉換具有Iterator接口</strong></li><li><strong>Array.prototype.of()：轉換一組值為真正數組，返回新數組</strong></li><li><strong>Array.prototype.copyWithin()：把指定位置的成員複製到其他位置，返回原數組</strong></li><li><strong>Array.prototype.find()：返回第一個符合條件的成員</strong></li><li><strong>Array.prototype.findIndex()：返回第一個符合條件的成員索引值</strong></li><li><strong>Array.prototype.fill()：根據指定值填充整個數組，返回原數組</strong></li><li><strong>Array.prototype.keys()：返回以索引值為遍歷器的對象</strong></li><li><strong>Array.prototype.values()：返回以屬性值為遍歷器的對象</strong></li><li><strong>Array.prototype.entries()：返回以索引值和屬性值為遍歷器的對象</strong></li><li><strong>數組空位：ES6明確將數組空位轉為undefined或empty</strong></li></ul><h2 id="ES7-2016"><a href="#ES7-2016" class="headerlink" title="ES7(2016)"></a><font color=#FF6600>ES7(2016)</font></h2><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title=" Array.prototype.includes()"></a><font color=#008000> Array.prototype.includes()</font></h3><p><font color=#FF0000><strong>includes()</strong></font> 方法用來判斷一個數組是否包含指定的值，如果包含則返回true，否則返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(array1.includes(<span class="number">2</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;cat&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;at&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="指數操作符"><a href="#指數操作符" class="headerlink" title=" 指數操作符"></a><font color=#008000> 指數操作符</font></h3><p><font color=#FF0000><strong>冪運算符</strong>**</font>，具有與Math.pow()一樣的功能，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>**<span class="number">10</span>) <span class="comment">// 1024</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span>)) <span class="comment">// 1024</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串（Template-string）"><a href="#模板字符串（Template-string）" class="headerlink" title=" 模板字符串（Template string）"></a><font color=#008000> 模板字符串（Template string）</font></h3><p>自ES7起，帶標籤的模版字面量遵守以下轉義序列的規則：</p><ul><li><strong>Unicode字符以”u”開頭，例如</strong><font color=#FF0000><strong>\u00A9</strong></font></li><li><strong>Unicode碼位用”u{}”表示，例如</strong><font color=#FF0000><strong>\u{2F804}</strong></font></li><li><strong>十六進制以”x”開頭，例如</strong><font color=#FF0000><strong>\xA9</strong></font></li><li><strong>八進制以””和數字開頭，例如</strong><font color=#FF0000><strong>\251</strong></font></li></ul><h2 id="⭐ES8-2017"><a href="#⭐ES8-2017" class="headerlink" title="⭐ES8(2017)"></a><font color=#FF6600>⭐ES8(2017)</font></h2><h3 id="⭐async-await"><a href="#⭐async-await" class="headerlink" title=" ⭐async/await"></a><font color=#008000> ⭐async/await</font></h3><p>雖然<strong>Promise</strong>解決了回調地獄的問提，但是鏈式調用太多，則變為另一形式的地獄，所以就有了<font color=#FF0000><strong>async/await</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise</span></span><br><span class="line">fetch(<span class="string">&#x27;coffee.jpg&#x27;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.blob();)</span><br><span class="line">    .then(<span class="function"><span class="params">myBlob</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> objectURL = URL.createObjectURL(myBlob);</span><br><span class="line">          <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">          image.src = objectURL;</span><br><span class="line">          <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;There has been a problem with your fetch operation: &#x27;</span> + e.message);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFetch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;coffee.jpg&#x27;</span>);</span><br><span class="line">      <span class="keyword">let</span> myBlob = <span class="keyword">await</span> response.blob();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> objectURL = URL.createObjectURL(myBlob);</span><br><span class="line">      <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">      image.src = objectURL;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch();</span><br><span class="line"><span class="comment">// Promise和async/await混用</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFetch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;coffee.jpg&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> response.blob();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch().then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> objectURL = URL.createObjectURL(blob);</span><br><span class="line">      <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">      image.src = objectURL;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Object-values-和Object-entries"><a href="#Object-values-和Object-entries" class="headerlink" title=" Object.values()和Object.entries()"></a><font color=#008000> Object.values()和Object.entries()</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.values()</span></span><br><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">42</span>,</span><br><span class="line">      <span class="attr">c</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(object1)); <span class="comment">// [&quot;somestring&quot;, 42, false]</span></span><br><span class="line"><span class="comment">// Object.entries()</span></span><br><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(object1)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a: somestring&quot;</span></span><br><span class="line"><span class="comment">// &quot;b: 42&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title=" Object.getOwnPropertyDescriptors()"></a><font color=#008000> Object.getOwnPropertyDescriptors()</font></h3><p>獲取一個物件的所有自身屬性的描述，如果沒有自身屬性，則返回空值。</p><h3 id="String-padding"><a href="#String-padding" class="headerlink" title=" String padding"></a><font color=#008000> String padding</font></h3><p>字串前後填充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// padStart</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.padStart(<span class="number">10</span>,<span class="string">&quot;*&quot;</span>); <span class="comment">// &quot;*****hello&quot;</span></span><br><span class="line"><span class="comment">// padEnd</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.padEnd(<span class="number">10</span>,<span class="string">&quot;*&quot;</span>);   <span class="comment">// &quot;hello*****&quot;</span></span><br></pre></td></tr></table></figure><h3 id="函數、參數、列表結尾允許逗號"><a href="#函數、參數、列表結尾允許逗號" class="headerlink" title=" 函數、參數、列表結尾允許逗號"></a><font color=#008000> 函數、參數、列表結尾允許逗號</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 參數定義</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">p</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">p,</span>) </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line">(p) =&gt; &#123;&#125;</span><br><span class="line">(p,) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">one</span>(<span class="params">a,</span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">two</span>(<span class="params">a, b,</span>)</span> &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">one</span>(<span class="params">a,</span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">two</span>(<span class="params">a, b,</span>)</span> &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函數調用</span></span><br><span class="line">f(p);</span><br><span class="line">f(p,);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">10</span>, <span class="number">20</span>,);</span><br></pre></td></tr></table></figure><h3 id="ShareArrayBuffer"><a href="#ShareArrayBuffer" class="headerlink" title=" ShareArrayBuffer"></a><font color=#008000> ShareArrayBuffer</font></h3><p><font color=#FF0000><strong>（因安全問題，暫時在Chrome跟FireFox中被禁用）</strong></font></p><h3 id="Atomics物件"><a href="#Atomics物件" class="headerlink" title=" Atomics物件"></a><font color=#008000> Atomics物件</font></h3><p><font color=#FF0000><strong>Atomics</strong></font>提供一組靜態方法來操作<strong>ShareArrayBuffer</strong>。</p><h2 id="ES9-2018"><a href="#ES9-2018" class="headerlink" title="ES9(2018)"></a><font color=#FF6600>ES9(2018)</font></h2><h3 id="⭐異步迭代-for-await…of"><a href="#⭐異步迭代-for-await…of" class="headerlink" title=" ⭐異步迭代(for await…of)"></a><font color=#008000> ⭐異步迭代(for await…of)</font></h3><p>await可以和<font color=#FF0000><strong>for…of</strong></font>循環一起使用，以串行的方式運行異步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">asyncGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> i++;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> <span class="keyword">await</span> (num <span class="keyword">of</span> asyncGenerator()) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title=" Promise.finally()"></a><font color=#008000> Promise.finally()</font></h3><p>當<strong>Promise</strong>的狀態變更，不管變為<font color=#FF0000><strong>完成了(resolved)</strong></font>、<font color=#FF0000><strong>拒絕了(rejected)</strong></font>，最終都會執行<font color=#FF0000><strong>finally()</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(url)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;)</span><br><span class="line">      .finally(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;结束&#x27;</span>);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="正規表達式命名捕獲組"><a href="#正規表達式命名捕獲組" class="headerlink" title=" 正規表達式命名捕獲組"></a><font color=#008000> 正規表達式命名捕獲組</font></h3><p>在以往的版本裡，JS的正規分組是無法命名的，所以容易混淆。例如下面獲取年月日的例子，很容易讓人搞不清哪個是月份，哪個是年份。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matched = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>.exec(<span class="string">&#x27;2019-01-02&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(matched[<span class="number">0</span>]);    <span class="comment">// 2019-01-01</span></span><br><span class="line"><span class="built_in">console</span>.log(matched[<span class="number">1</span>]);    <span class="comment">// 2019</span></span><br><span class="line"><span class="built_in">console</span>.log(matched[<span class="number">2</span>]);    <span class="comment">// 01</span></span><br><span class="line"><span class="built_in">console</span>.log(matched[<span class="number">3</span>]);    <span class="comment">// 02</span></span><br></pre></td></tr></table></figure><h3 id="正規表達式反向斷言"><a href="#正規表達式反向斷言" class="headerlink" title=" 正規表達式反向斷言"></a><font color=#008000> 正規表達式反向斷言</font></h3><ul><li><strong>正規表達式的斷言一共有4 種形式:</strong><ul><li><font color=#FF0000>(?=pattern)</font> 零寬正向肯定斷言(zero-width positive lookahead assertion)</li><li><font color=#FF0000>(?!pattern)</font> 零寬正向否定斷言(zero-width negative lookahead assertion)</li><li><font color=#FF0000>(?&lt;=pattern)</font> 零寬反向肯定斷言(zero-width positive lookbehind assertion)</li><li><font color=#FF0000>(?&lt;!pattern)</font> 零寬反向否定斷言(zero-width negative lookbehind assertion)</li></ul></li></ul><p><img src="4_4.jpg" alt="正規表達式反向斷言"></p><h3 id="正規表達式s-dotAll模式"><a href="#正規表達式s-dotAll模式" class="headerlink" title=" 正規表達式s/dotAll模式"></a><font color=#008000> 正規表達式s/dotAll模式</font></h3><p>正規表達式中點.匹配除rollback的任何單字字符，標記s改變這種行為，允許終止符出現。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/hello.world/.test(<span class="string">&#x27;hello\nworld&#x27;</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><img src="4_5.jpg" alt="正規表達式s/dotAll模式"></p><h2 id="ES10-2019"><a href="#ES10-2019" class="headerlink" title="ES10(2019)"></a><font color=#FF6600>ES10(2019)</font></h2><h3 id="Array-flat-和Array-flatMap"><a href="#Array-flat-和Array-flatMap" class="headerlink" title=" Array.flat()和Array.flatMap()"></a><font color=#008000> Array.flat()和Array.flatMap()</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr1.flat(<span class="literal">Infinity</span>); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">arr2.map(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>]); <span class="comment">// [[2], [4], [6], [8]]</span></span><br><span class="line"></span><br><span class="line">arr2.flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>]); <span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line">arr2.flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [[x * <span class="number">2</span>]]); <span class="comment">// [[2], [4], [6], [8]]</span></span><br></pre></td></tr></table></figure><h3 id="String-trimXXX"><a href="#String-trimXXX" class="headerlink" title=" String.trimXXX()"></a><font color=#008000> String.trimXXX()</font></h3><p>在ES5中，我們可以通過trim()去掉字串首尾，但無法只去掉單邊。去掉開頭的空格，可以使用<font color=#FF0000><strong>trimStart()</strong></font>、<font color=#FF0000><strong>trimLeft()</strong></font>；<br>去掉結尾的空格，可以使用<font color=#FF0000><strong>trimEnd()</strong></font>、<font color=#FF0000><strong>trimRight()</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trimStart()跟trimEnd()才是標準方法</span></span><br><span class="line"><span class="keyword">const</span> Str = <span class="string">&#x27;   Hello world!  &#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Str); <span class="comment">// &#x27;   Hello world!  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(Str.trimStart());<span class="comment">// &#x27;Hello world!  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(Str.trimLeft()); <span class="comment">// &#x27;Hello world!  &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(Str.trimEnd()); <span class="comment">// &#x27;   Hello world!&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(Str.trimRight()); <span class="comment">// &#x27;   Hello world!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title=" Object.fromEntries()"></a><font color=#008000> Object.fromEntries()</font></h3><p><font color=#FF0000><strong>Object.fromEntries()</strong></font>方法把鍵值對列表轉換為一個物件，它是<font color=#FF0000><strong>Object.entries()</strong></font>的相反函數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通過 Object.fromEntries， 可以將 Map 轉化為 Object:</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([ [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>] ]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.fromEntries(map)); <span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title=" Symbol.prototype.description"></a><font color=#008000> Symbol.prototype.description</font></h3><p><strong>description</strong> 是一個<font color=#FF0000><strong>只讀</strong></font>屬性，它會<strong>返回Symbol</strong>物件的可選描述字串。與Symbol.prototype.toString()不同的是它不會包含Symbol()的字串。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>).toString();   <span class="comment">// &quot;Symbol(desc)&quot;</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>).description;  <span class="comment">// &quot;desc&quot;</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">&#x27;&#x27;</span>).description;      <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="built_in">Symbol</span>().description;        <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 具名 symbols</span></span><br><span class="line"><span class="built_in">Symbol</span>.iterator.toString();  <span class="comment">// &quot;Symbol(Symbol.iterator)&quot;</span></span><br><span class="line"><span class="built_in">Symbol</span>.iterator.description; <span class="comment">// &quot;Symbol.iterator&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局 symbols</span></span><br><span class="line"><span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>).toString();  <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line"><span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>).description; <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h3 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title=" String.prototype.matchAll"></a><font color=#008000> String.prototype.matchAll</font></h3><p><strong>matchAll（）</strong>為所有的匹配成功的對象<font color=#FF0000><strong>返回一個迭代器</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;test1test2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">str.match(regexp); <span class="comment">// [&#x27;test1&#x27;, &#x27;test2&#x27;]</span></span><br><span class="line">str.matchAll(regexp); <span class="comment">// RegExpStringIterator &#123;&#125;</span></span><br><span class="line">[...str.matchAll(regexp)] <span class="comment">// [[&#x27;test1&#x27;, &#x27;e&#x27;, &#x27;st1&#x27;, &#x27;1&#x27;, index: 0, input: &#x27;test1test2&#x27;, length: 4], [&#x27;test2&#x27;, &#x27;e&#x27;, &#x27;st2&#x27;, &#x27;2&#x27;, index: 5, input: &#x27;test1test2&#x27;, length: 4]]</span></span><br></pre></td></tr></table></figure><h3 id="Function-prototype-toString"><a href="#Function-prototype-toString" class="headerlink" title=" Function.prototype.toString()"></a><font color=#008000> Function.prototype.toString()</font></h3><p>以往版本是去掉空格，但從ES10開始<font color=#FF0000><strong>保留空格</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs.toString()); <span class="comment">// &quot;function abs() &#123; [native code] &#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="⭐try-catch，可選catch"><a href="#⭐try-catch，可選catch" class="headerlink" title=" ⭐try-catch，可選catch"></a><font color=#008000> ⭐try-catch，可選catch</font></h3><p>以往版本中，try-catch的catch需要帶異常參數，但從ES10開始<font color=#FF0000><strong>異常參數不是必須的</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES10之前</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// tryCode</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// catchCode</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES10之後</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Foobar&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">&#x27;Bar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⭐BigInt"><a href="#⭐BigInt" class="headerlink" title=" ⭐BigInt"></a><font color=#008000> ⭐BigInt</font></h3><p><strong>BigInt</strong>解決了<strong>Number</strong>的不足，<font color=#FF0000><strong>BigInt可以表示任意大的整数</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大於2的53次方的整數，無法保持精度</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">53</span> === (<span class="number">2</span> ** <span class="number">53</span> + <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 超過2的1024次方的數值，無法表示</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">1024</span> <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><p>但是在ES10引入BigInt，這個問題便解決了。</p><ul><li><strong>所以在BigInt出來之後，</strong><font color=#FF0000><strong>javascript的參數類型</strong></font><strong>便增加到7個:</strong><ul><li><strong>Boolean</strong></li><li><strong>Null</strong></li><li><strong>Undefined</strong></li><li><strong>Number</strong></li><li><strong>String</strong></li><li><strong>Symbol (ES6)</strong></li><li><strong>BigInt (ES10)</strong></li></ul></li></ul><h3 id="globalThis"><a href="#globalThis" class="headerlink" title=" globalThis"></a><font color=#008000> globalThis</font></h3><p><font color=#FF0000><strong>globalThis</strong></font>，屬性包含類似於全局對象<font color=#FF0000><strong>this</strong></font>值，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">globalThis === <span class="built_in">this</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="⭐import"><a href="#⭐import" class="headerlink" title=" ⭐import()"></a><font color=#008000> ⭐import()</font></h3><p>靜態的**import()<strong>語句用於導入由另一個模組導出的綁定，import語句只能在聲明了<font color=#FF0000><strong>type=”module”</strong></font>的script的標籤使用，但是在ES10之後，我們有動態</strong>import()<strong>，它不需要依賴</strong>type=”module”**的script標籤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.querySelector(<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> link <span class="keyword">of</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;nav &gt; a&quot;</span>)) &#123;</span><br><span class="line">      link.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            <span class="keyword">import</span>(<span class="string">&#x27;/modules/my-module.js&#x27;</span>)</span><br><span class="line">              .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">module</span>.loadPageInto(main);</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    main.textContent = err.message;</span><br><span class="line">              &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="私有元素與function"><a href="#私有元素與function" class="headerlink" title=" 私有元素與function"></a><font color=#008000> 私有元素與function</font></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES10之前</span></span><br><span class="line"><span class="comment">// web component 寫法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">      <span class="keyword">get</span> <span class="title">x</span>() &#123; </span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">this</span>.xValue;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span> <span class="title">x</span>(<span class="params">value</span>) &#123;</span><br><span class="line">              <span class="built_in">this</span>.xValue = value;</span><br><span class="line">              <span class="built_in">window</span>.requestAnimationFrame(<span class="built_in">this</span>.render.bind(<span class="built_in">this</span>));;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">clicked</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x++;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            <span class="built_in">this</span>.onclick = <span class="built_in">this</span>.clicked.bind(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.xValue = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">connectedCallback</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">              <span class="built_in">this</span>.render();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.textContent = <span class="built_in">this</span>.x.toString();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">&#x27;num-counter&#x27;</span>, Counter);</span><br><span class="line"><span class="comment">// ES10之後</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">      #xValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      get #<span class="function"><span class="title">x</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">          <span class="keyword">return</span> #xValue;</span><br><span class="line">      &#125;</span><br><span class="line">      set #<span class="function"><span class="title">x</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#xValue = value;</span><br><span class="line">            <span class="built_in">window</span>.requestAnimationFrame(<span class="built_in">this</span>.#render.bind(<span class="built_in">this</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #<span class="function"><span class="title">clicked</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#x++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            <span class="built_in">this</span>.onclick = <span class="built_in">this</span>.#clicked.bind(<span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">connectedCallback</span>(<span class="params"></span>)</span> &#123; </span><br><span class="line">              <span class="built_in">this</span>.#render();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.textContent = <span class="built_in">this</span>.#x.toString();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.customElements.define(<span class="string">&#x27;num-counter&#x27;</span>, Counter);</span><br></pre></td></tr></table></figure><h2 id="ES11-2020"><a href="#ES11-2020" class="headerlink" title="ES11(2020)"></a><font color=#FF6600>ES11(2020)</font></h2><h3 id="空值處理-Nullish-coalescing-Operator"><a href="#空值處理-Nullish-coalescing-Operator" class="headerlink" title=" 空值處理 (Nullish coalescing Operator)"></a><font color=#008000> 空值處理 (Nullish coalescing Operator)</font></h3><p>表達式在 <font color=#FF0000><strong>??</strong></font> 的左側運算符求值為<font color=#FF0000><strong>undefined</strong></font>或<font color=#FF0000><strong>null</strong></font>，返回其右側。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">u1</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">u2</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">u3</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">u4</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">u5</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> u1 = user.u1 ?? <span class="string">&#x27;用戶1&#x27;</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> u2 = user.u2 ?? <span class="string">&#x27;用戶2&#x27;</span>;  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> u3 = user.u3 ?? <span class="string">&#x27;用戶3&#x27;</span>;  <span class="comment">// 用戶3</span></span><br><span class="line"><span class="keyword">let</span> u4 = user.u4 ?? <span class="string">&#x27;用戶4&#x27;</span>;  <span class="comment">// 用戶4</span></span><br><span class="line"><span class="keyword">let</span> u5 = user.u5 ?? <span class="string">&#x27;用戶5&#x27;</span>;  <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="可選鏈（Optional-chaining）"><a href="#可選鏈（Optional-chaining）" class="headerlink" title=" 可選鏈（Optional chaining）"></a><font color=#008000> 可選鏈（Optional chaining）</font></h3><p><font color=#FF0000><strong>?.</strong></font> 用戶檢測不確定的中間節點。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假設沒有一個user對象</span></span><br><span class="line"><span class="keyword">const</span> name = props &amp;&amp; props.user &amp;&amp; props.user.info &amp;&amp; props.user.info.name;</span><br><span class="line"><span class="comment">// 使用可選鏈</span></span><br><span class="line"><span class="keyword">const</span> name = props?.user?.info?.name;</span><br></pre></td></tr></table></figure><h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title=" Promise.allSettled"></a><font color=#008000> Promise.allSettled</font></h3><p>在之前使用 <strong>Promise.all</strong> 的時候，如果其中某個任務出現異常 <strong>reject</strong> ，<font color=#FF0000><strong>所有任務都會掛掉，Promise直接進入 reject 狀態</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;服務異常&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">  &#125;),</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果其中一個任務是 reject，則不會執行此回調。</span></span><br><span class="line">    doSomething(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 本例中會執行這個回調</span></span><br><span class="line">    <span class="comment">// error: &#123;code: 500, msg: &quot;服務異常&quot;&#125;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>而 <strong>Promise.allSettled</strong> 就是解決這個問題的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.allSettled([</span><br><span class="line">    <span class="built_in">Promise</span>.reject(&#123;<span class="attr">code</span>: <span class="number">500</span>, <span class="attr">msg</span>:<span class="string">&#x27;服务异常&#x27;</span>&#125;),</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">list</span>: []&#125;),</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">list</span>: []&#125;)])</span><br><span class="line">]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0: &#123;status: &quot;rejected&quot;, reason: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">        1: &#123;status: &quot;fulfilled&quot;, value: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">        2: &#123;status: &quot;fulfilled&quot;, value: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 其它業務過濾掉 rejected 狀態，盡可能多的保證頁面區域數據渲染</span></span><br><span class="line">    RenderContent(res.filter(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> el.status !== <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="ES12-2021"><a href="#ES12-2021" class="headerlink" title="ES12(2021)"></a><font color=#FF6600>ES12(2021)</font></h2><h3 id="String-protype-replaceAll"><a href="#String-protype-replaceAll" class="headerlink" title=" String.protype.replaceAll"></a><font color=#008000> String.protype.replaceAll</font></h3><p>所有指定字元替換的新方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES12之前</span></span><br><span class="line"><span class="keyword">const</span> teststring = <span class="string">&quot;test+test+test+&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> teststringaddR  = fruits.replace(<span class="regexp">/\+/g</span>, <span class="string">&quot;R&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(teststringaddR); <span class="comment">// testRtestRtestR</span></span><br><span class="line"><span class="comment">// ES12之後</span></span><br><span class="line"><span class="keyword">const</span> teststring = <span class="string">&quot;test+test+test+&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> teststringaddR  = fruits.replaceAll(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;R&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(teststringaddR); <span class="comment">// testRtestRtestR</span></span><br></pre></td></tr></table></figure><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title=" Promise.any"></a><font color=#008000> Promise.any</font></h3><p><strong>Promise.any</strong>方法和<strong>Promise.race</strong>類似——只要給定的迭代中的一個 <strong>promise</strong> 成功，就採用第一個 <strong>promise</strong> 的值做為它的返回值，但與 <strong>Promise.race</strong> 的不同之處在於——<font color=#FF0000><strong>它會等到所有 promise 都失敗之後，才返回失敗的值</strong></font>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFetch = <span class="function">(<span class="params">url</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> fetch(url), <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3000</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  myFetch(<span class="string">&quot;/endpoint-1&quot;</span>),</span><br><span class="line">  myFetch(<span class="string">&quot;/endpoint-2&quot;</span>),</span><br><span class="line">  myFetch(<span class="string">&quot;/endpoint-3&quot;</span>),</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 使用 .then .catch</span></span><br><span class="line"><span class="built_in">Promise</span>.any(promises) <span class="comment">// 任何一個 promise 成功。</span></span><br><span class="line">  .then(<span class="built_in">console</span>.log) <span class="comment">// 比如 ‘3’</span></span><br><span class="line">  .catch(<span class="built_in">console</span>.error); <span class="comment">// 所有的 promise 都失敗了</span></span><br><span class="line"><span class="comment">// 使用 async-await</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">await</span> <span class="built_in">Promise</span>.any(promises); <span class="comment">// 任何一個 promise 成功返回。</span></span><br><span class="line">  <span class="built_in">console</span>.log(first);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 所有的 promise 都失敗了</span></span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WeakRef"><a href="#WeakRef" class="headerlink" title=" WeakRef"></a><font color=#008000> WeakRef</font></h3><ul><li><strong>可以通過 WeakRef 類來給某個對象創建一個弱引用</strong></li><li><strong>可以通過FinalizationRegistry 類，在某個對象被垃圾回收之後，執行一些自定義方法</strong></li></ul><p>通過弱引用一個對象，可以讓該對象在沒有其它引用的情況下被垃圾回收機制回收。<strong>WeakRef</strong> 主要用來緩存或映射一些大型物件，當你希望某個物件在不被其它地方引用的情況下及時地被垃圾回收，那麼你就可以使用它。</p><h3 id="邏輯賦值運算符"><a href="#邏輯賦值運算符" class="headerlink" title=" 邏輯賦值運算符"></a><font color=#008000> 邏輯賦值運算符</font></h3><p>結合了<font color=#FF0000><strong>邏輯運算符（&amp;&amp;，||，??）和賦值表達式</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a ||= b</span><br><span class="line"><span class="comment">//等於</span></span><br><span class="line">a = a || (a = b)</span><br><span class="line"></span><br><span class="line">a &amp;&amp;= b</span><br><span class="line"><span class="comment">//等於</span></span><br><span class="line">a = a &amp;&amp; (a = b)</span><br><span class="line"></span><br><span class="line">a ??= b</span><br><span class="line"><span class="comment">//等於</span></span><br><span class="line">a = a ?? (a = b)</span><br></pre></td></tr></table></figure><h3 id="數字分隔符"><a href="#數字分隔符" class="headerlink" title=" 數字分隔符"></a><font color=#008000> 數字分隔符</font></h3><p>可以在數字間創建可視化分隔符，通過<font color=#FF0000><strong>_下劃線</strong></font>來分割數字，使數字更具可讀性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> money = <span class="number">1_000_000_000</span>;</span><br><span class="line"><span class="comment">//等於</span></span><br><span class="line"><span class="keyword">const</span> money = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">1_000_000_000</span> === <span class="number">1000000000</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站:"></a>參考網站:</h1><ol><li><a href="https://segmentfault.com/a/1190000023062765">https://segmentfault.com/a/1190000023062765</a></li><li><a href="https://xjl271314.github.io/docs/es/">https://xjl271314.github.io/docs/es/</a></li><li><a href="https://segmentfault.com/a/1190000039272641">https://segmentfault.com/a/1190000039272641</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
